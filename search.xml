<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[test.md]]></title>
    <url>%2F2018%2F04%2F29%2Ftest%2F</url>
    <content type="text"><![CDATA[testtest1$x^2 = y$ RNN1、单层RNN模型 上图是一个最简单的单层RNN模型，其中每一个节点相当于原来的全连接网络，$x_t, x_{t+1}$就是时间序列的输入，每一项是原来的单独的一个输入（也是n维的）。 计算 $O_t = g(V_{S_t}) $ $V_{S_t} = f(U x_t + S_{t-1} w)$$S_{t-1}$是上一个节点的输出，w为权值矩阵，f是激活函数 从上图可以看出同一层的RNN权值是共享的 总结 RNN的参数更多虽然参数多，但是权值是共享的啊 存在多个全连接的节点 不仅有全连接的参数，还多了上一层往下一层传递的参数 将公式依次带入，发现当前的输出会受之前的所有输入的影响 2、双向RNN模型 为啥要考虑双向：有时候，不仅仅需要某个节点前面的信息，也需要节点后面的信息，而基本的RNN无法得到节点后面的信息； 如上图所示，A就相当于单层RNN中S，属于中间状态，注意此处不同层之间的权值是不共享的 $y_2 = g(V^- A_2^- + V A_2)$ $A_2 = f(Ux_2 + W A_1)$ $A_2^- = f(U^-x_2 + W^- A_1^-)$ 3、多层RNN模型 第i层隐藏层的输入是第i-1层隐藏层输入和上一个节点输出的共同输出； 4、RNN的训练算法：BPTT 符号定义 $O_t = \varphi(VS_t)$ $S_t = \phi(WS_{t-1}+UX_t)$ 令$S^t = WS{t-1}+UX_t$和$O^_t = VS_t$ ​ 详细梯度推导 总结 这些推导虽然极其复杂且不知道为什么要这么求导 将复杂的求导根据链式法则转换到关键的变量之间的求导上，比如$S_k^*$对$S_{k-1}^*$的求导 梯度爆炸和梯度消失 从iv的第二个式子可以看出来，对于比较之前的梯度，因为有乘积的形式，所以会导致最后的梯度是指数形式，如果指数形式内部是小于1或者大于1，很容易就出现梯度消失和爆炸的问题 解决 梯度消失 改用别的激活函数，如ReLU，但是容易发生梯度爆炸，需要初始化参数时尽量小 修改state的传递方式 LSTM 引出 RNN的梯度是一个指数函数，当序列比较长的时候，容易出现梯度消失和梯度爆炸的问题； 梯度对短期的数据比较敏感，因此可以考虑加入长期的记忆c 前向计算 遗忘门 控制上个单元的状态$c_{t-1}$有多少进入到当前的单元状态中 $f_t = \sigma(W_f [h_{t-1}, x_t] + b_f)$ $W_f [h_{t-1},x_t] = w_{fh}h_{t-1} + w_{fx}x_t$ 根据当前的输入和上一个节点的输出决定对前一个节点的状态单元保留多少（长期记忆） 输入门 此刻的状态有多少进入到当前的单元状态（长期记忆） $i_t = \sigma(W_i [h_{t-1}, x_t] + b_i)$ 根据当前的输入和上一个节点的输出决定对当前状态输出多少到当前节点的状态单元 当前节点本应该输出的状态$c_t^-$ 当前节点本应该输出的节点状态 $c_t^- = tanh(W_c[h_{t-1}, x_t] + b_c)$ 当前节点的单元状态 根据该节点本应该输出的状态和输入门的阈值加上遗忘门控制的$c_{t-1}$得到当前节点的单元状态 $c_t = i_t . c_t^- + c_{t-1}.f_t$ 输出门 得到将单元状态输出多少的阈值矩阵 $o_t = W_o[h_{t-1}, x_t] + b_o$ 输出门得到的阈值向量 $h_t = o_t . tanh(c_t)$ 从逻辑上来说，$c_t$就是个比较好的输出了，为什么还需要输出门去得到$h_t$呢？但是如果不得到$h_t$下个状态就没有隐藏状态了 $h_t$是作为rnn单元的输出 训练算法 LSTM解决梯度消失问题的原因 本质上来说，将原来的隐藏状态的更新公式从激活函数套激活函数中解放出来变成了加法的形式，从而避免了梯度连乘 普通rnn的更新形式：$s_t = \sigma(UX_t+WS_{t-1})$，LSTM的更新形式：$C_t = i_t*g_t + f_t*C_{t-1}$ $\frac{\partial c_t}{\partial c_k} = f_t*\frac{\partial c_{t-1}}{\partial c_k}$ GRU 与LSTM两点不同 将遗忘门、输出门和输入门合并为两个门：更新门和重置门 将两种状态合并为一种状态 前向计算 为什么改成这样会有比较好的效果？？ $Z_t = \sigma(W_z [h_{t-1}, x_t])$ $r_t = \sigma(W_r [h_{t-1}, x_t])$ $h_t^- = tanh(W([r_t.h_{t-1}, x_t]))$ $h_t = (1 - Z_t).h_{t-1} + Z_t.h_t^-$ 个人理解 其实GRU就是对以前信息是否加强做一个限制，而如果对以前的信息获取更多那么就存在了更加长期的记忆，如果少获取以前的信息那么就更多关注短期的记忆 $r_t$如果是0的话，就是普通的RNN了，几乎对$h_{t-1}$不更多摄入； $r_t$如果比较大的话，相当于对以前的记忆进行更多地存储 $Z_t$相当于以前的W和U矩阵 180312补充：以上的理解不算完全对，因为如果加上了激活函数照样爆炸]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>rnn</tag>
        <tag>lstm</tag>
      </tags>
  </entry>
</search>
